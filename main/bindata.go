// Code generated by go-bindata.
// sources:
// gui/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _guiIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xed\x6e\xe2\x3a\x10\xfd\x7f\x9f\x62\x94\xea\x4a\xb4\x02\x92\x5e\x4a\xd5\x9b\x0d\xd5\xfe\xdf\x95\xf6\xcf\xbe\x80\x13\x0f\x89\x55\xc7\x63\xd9\xc3\x47\xbb\xda\x77\x5f\x41\x4a\x1b\x8a\xa1\x09\x0b\x08\x91\x49\x9c\xf1\xf1\x99\x39\x47\x93\x55\x5c\xeb\xc7\x7f\x00\x00\xb2\x0a\x85\x6c\x2e\x01\xb2\x1a\x59\x80\x11\x35\xce\xa2\xa5\xc2\x95\x25\xc7\x11\x14\x64\x18\x0d\xcf\xa2\x95\x92\x5c\xcd\x24\x2e\x55\x81\xa3\x6d\x30\x04\x65\x14\x2b\xa1\x47\xbe\x10\x1a\x67\xb7\xd1\x2e\x15\x40\xe6\xf9\x59\xe3\x7b\x0c\x00\xf1\x0d\x54\xcc\xd6\xa7\x71\x5c\x90\x44\x8b\x66\xac\x28\x76\x94\xa3\xe3\x1a\xbd\x47\xa7\x31\xb6\x68\xe2\xef\x98\x17\x04\x22\xf7\xa4\x17\x8c\xfa\x19\x44\x2d\x5e\x94\x29\x6f\xe2\x76\xba\xcd\x29\x86\x39\xc9\x67\xf8\xd5\xbe\xdd\x3c\x43\x55\x56\x9c\xc2\x6d\x92\xfc\xfb\xe5\xe0\x29\x2d\xd1\xcd\x35\xad\x52\xa8\x94\x94\x68\xf6\x57\xfc\xde\x8b\x8e\x6c\x50\x0b\x57\x2a\x93\x42\x72\x98\x3d\x17\xc5\x53\xe9\x68\x61\x64\x0a\xa3\x15\xe6\x4f\x8a\x47\x4e\xc8\x0d\x4d\xe5\xe6\x1f\x0d\x0f\x0a\x34\x8c\x6e\x08\x57\x93\xfb\xc9\xc3\x64\xfe\x76\x71\xfd\x49\xba\x9a\x5e\x2e\x96\x8b\x2e\x87\xca\x5f\x2a\xd5\x99\x69\xf6\x4b\x36\xf6\x5a\xf8\x0a\x65\xa0\x6c\x96\xbc\x62\x45\x26\x7d\xeb\xae\x43\x3c\xbb\x9a\xb1\x13\xc6\xcf\xc9\xd5\x29\x38\x62\xc1\x38\x18\x4d\x25\x96\x81\x13\x6c\xcb\xd2\x63\x39\xf5\xca\xed\x7b\xac\xee\xb1\x92\x6c\xb0\x7b\x35\xce\x39\xf8\xc0\x35\x8a\x0a\x35\x3c\x31\x53\x9d\xc2\x43\x48\x6b\x8c\x6b\x1e\xf9\x4a\xc8\x8d\xdc\x26\x76\xfd\xf6\x73\x65\x2e\x06\xc9\x70\xfb\x1d\x4f\xbb\x15\x74\xcc\x64\x87\xad\x30\x27\x0e\x14\x79\xbb\xa5\xd0\xaa\x34\x29\x34\x0d\x74\x08\x6b\x4e\x86\x53\xb8\xff\xcf\xae\xe3\xdb\x24\xb1\x6b\x10\x4e\x09\x7d\x04\x7e\x8b\xd5\x85\xb5\xe8\x0a\xe1\x03\x7d\xd3\x65\xdb\xd3\xce\xb3\xf9\x14\xa4\xc9\xa5\x70\x75\xf7\xff\x3c\x9f\x4c\x3b\xb3\x92\xe6\x38\x27\x87\x1f\xc8\x79\xbd\x1b\xe0\xe8\xd5\xd5\x53\x10\xcc\x6e\xc0\x8a\x35\x86\x9a\xef\xa8\x14\xfa\x29\xa1\x8f\x10\x7a\xe9\xa0\xb3\x0c\x02\x0b\x4f\xb0\x79\xa6\x73\x9c\xd6\xd4\xd4\xae\xcf\x51\xd5\xf4\xa3\xaa\x3e\xef\x82\x33\xe1\xef\x76\x1c\x4d\x93\x10\xd4\x9e\xce\x70\x0c\x66\x58\xb3\x9d\xe9\x3d\xa0\xa3\x0b\xb4\x20\xf5\xbb\xe3\x76\xc7\xfd\x77\xf4\x6e\xe1\x5f\x8a\xdb\xbd\xf0\x6b\x8d\x52\x09\x18\xd4\x62\xdd\x0c\x66\x29\x4c\xef\x12\xbb\xbe\x3e\x40\xda\xd3\x49\xbb\x99\xda\xce\x4d\x37\x5b\x9e\x76\xd3\x5e\x7e\xda\x75\xf3\xcf\x3d\xf5\xb4\xab\x7e\x2c\xf9\x7b\x94\xc5\xad\x21\x36\x8b\x9b\x59\xb9\x09\x36\x63\x61\x6b\xd8\x95\x6a\x09\x85\x16\xde\xcf\xa2\x57\x4a\xa3\xbd\xd1\x77\x6f\x05\x93\x8d\x60\x6b\xb9\xb3\xe8\x9b\x2a\x9e\xe0\x67\x85\x35\xfc\x58\x70\xf4\x98\xc5\x52\x2d\x8f\xbf\x99\x13\x77\x7c\xb3\x15\x66\x71\x03\x36\x8b\x9b\xb9\xff\x4f\x00\x00\x00\xff\xff\xf1\x2d\x4f\xd9\xff\x0b\x00\x00")

func guiIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_guiIndexHtml,
		"gui/index.html",
	)
}

func guiIndexHtml() (*asset, error) {
	bytes, err := guiIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gui/index.html", size: 3071, mode: os.FileMode(420), modTime: time.Unix(1545653398, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"gui/index.html": guiIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"gui": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{guiIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

