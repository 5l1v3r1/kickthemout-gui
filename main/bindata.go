// Code generated by go-bindata.
// sources:
// gui/error.html
// gui/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _guiErrorHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\xc9\x28\xc9\xcd\xb1\xe3\xe5\x52\x50\x50\x50\xb0\xc9\x48\x4d\x4c\x81\xb1\xf5\x91\x39\x49\xf9\x29\x95\x50\x36\x98\x9f\x92\x59\x66\xe7\x5a\x54\x94\x5f\xa4\x10\x90\x93\x98\x9c\x9a\x91\x9f\x93\x92\x5a\x64\xa3\x0f\x12\x86\x69\x87\x6a\xb1\xd1\x07\x5b\x00\x08\x00\x00\xff\xff\x53\xa7\x97\x03\x67\x00\x00\x00")

func guiErrorHtmlBytes() ([]byte, error) {
	return bindataRead(
		_guiErrorHtml,
		"gui/error.html",
	)
}

func guiErrorHtml() (*asset, error) {
	bytes, err := guiErrorHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gui/error.html", size: 103, mode: os.FileMode(438), modTime: time.Unix(1546092069, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _guiIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\xdb\x6e\xda\x4c\x10\xbe\xff\xa5\xff\x1d\x46\x8e\x2a\x91\x08\xb0\x53\x42\x94\xba\x26\xea\x7d\x2b\xf5\xa6\x2f\xb0\xf6\x0e\xf6\x2a\xeb\x9d\xd5\xee\x70\x48\xaa\xbe\x7b\x05\x18\x04\x61\x09\x36\x25\x11\xc2\xb3\x3b\x9e\xf3\xf7\x69\xc8\x2a\xae\xf5\xf3\xff\xff\x01\x00\x64\x15\x0a\xd9\x3c\x03\x64\x35\xb2\x00\x23\x6a\x9c\x44\x73\x85\x0b\x4b\x8e\x23\x28\xc8\x30\x1a\x9e\x44\x0b\x25\xb9\x9a\x48\x9c\xab\x02\x07\x6b\xa1\x0f\xca\x28\x56\x42\x0f\x7c\x21\x34\x4e\xee\xa3\x9d\x2d\x80\xcc\xf3\xab\xc6\xbd\x03\x00\x88\xef\xa0\x62\xb6\x3e\x8d\xe3\x82\x24\x5a\x34\x43\x45\xb1\xa3\x1c\x1d\xd7\xe8\x3d\x3a\x8d\xb1\x45\x13\xff\xc0\xbc\x20\x10\xb9\x27\x3d\x63\xd4\xaf\x20\x6a\xf1\xa6\x4c\x79\x17\x1f\xd8\x5b\xa5\xd2\xcf\x49\xbe\xc2\xef\x83\xf3\xcd\x25\xaa\xb2\xe2\x14\xee\x93\xe4\xd3\xd7\xe3\x6b\x9a\xa3\x9b\x6a\x5a\xa4\x50\x29\x29\xd1\xbc\x53\xf9\x73\x28\x9e\x72\x52\x0b\x57\x2a\x93\x42\x12\xf0\x90\x8b\xe2\xa5\x74\x34\x33\x32\x85\xc1\x02\xf3\x17\xc5\x03\x27\xe4\xaa\x5e\xe5\xea\x1b\x0d\xf7\x0a\x34\x8c\xae\x0f\x37\xa3\xc7\xd1\xd3\x68\xba\x7b\xb8\x3d\x67\xaf\xa6\xb7\xeb\x19\xa3\x2b\xc6\xe5\xaf\x66\xeb\x52\x3b\xef\x5a\x37\xf4\x5a\xf8\x0a\x65\xa8\x7d\x96\xbc\x62\x45\x26\xdd\xcd\x5a\x20\xa6\x6d\xef\xd8\x09\xe3\xa7\xe4\xea\x14\x1c\xb1\x60\xec\x0d\xc6\x12\xcb\x50\x1a\xeb\xf6\x74\xd1\xa7\x6e\xd6\x7d\x17\xf5\x2e\xaa\x64\xc3\xb3\xac\x71\xca\xe1\x1b\xb7\x41\x59\x10\x00\xc4\x4c\x75\x0a\x4f\x41\x00\x32\x2e\x79\xe0\x2b\x21\x57\x18\x1c\xd9\xe5\xee\xe3\xca\x5c\xf4\x92\xfe\xfa\x7f\x38\x6e\xdb\xdd\x21\x93\xed\xef\x89\x39\x71\xa8\xe3\x6b\xaf\x42\xab\xd2\xa4\xb0\x19\xa8\x40\x68\x53\x32\x9c\xc2\xe3\x67\xbb\x8c\xef\x93\xc4\x2e\x41\x38\x25\xf4\xa9\x1c\xf6\xea\x3b\xb3\x16\x5d\x21\x7c\x68\x8c\x5a\x79\x3e\xc3\x4a\xab\xbf\x82\x34\xb9\x14\x6e\x1e\xbe\x4c\xf3\xd1\xb8\x43\x75\xd2\x1c\xa7\xe4\xf0\x5d\x91\x9a\xd3\x50\xad\x1a\xea\x4f\x41\x30\xbb\x1e\x2b\xd6\x18\x1c\xc7\x93\xf8\xe8\x08\x8f\x4e\xe8\xe8\x06\x8e\xf6\xd8\x08\x69\x7e\x54\xd5\x8b\x69\xe5\x0c\xd6\xc6\x76\x79\x19\xda\xc6\x47\x68\x6b\x31\x14\x17\x67\xb1\xf5\x3a\x18\x27\xc1\x80\x3b\x13\xc7\xc9\x60\x4f\x00\xba\x7d\xad\x8f\x0b\xd3\x2a\xc0\x70\x23\xb6\x79\x77\x09\xff\x5f\x6b\xbd\xce\xe2\x9a\x85\x3e\x3c\xf8\x56\xa3\x54\x02\x7a\xb5\x58\x6e\xf6\xbb\x14\xc6\x0f\x89\x5d\xde\x1e\x07\xdc\x95\x75\x5b\xb2\xdf\x96\x79\x57\x5e\xcf\x30\x6f\x37\xee\x6d\xed\xbf\x05\xff\x9e\x61\xe0\xa3\x11\xd8\x13\xb3\x78\x7f\x29\xce\xe2\x66\xfd\x6e\xc4\xd5\x8e\xb9\xbf\x40\x4b\x35\x87\x42\x0b\xef\x27\x51\x53\xdf\xe8\x70\x9d\x3e\x50\x61\xb2\x11\xac\x39\x7a\x12\x7d\x57\xc5\x0b\xfc\xaa\xb0\x86\x9f\x33\x8e\x9e\xb3\x58\xaa\xf9\x07\xaf\xe6\xc4\x6d\x5f\xdd\x97\xb3\xb8\x89\x38\x8b\x9b\xdf\x14\x7f\x03\x00\x00\xff\xff\x6d\xf0\x36\x51\x5c\x0c\x00\x00")

func guiIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_guiIndexHtml,
		"gui/index.html",
	)
}

func guiIndexHtml() (*asset, error) {
	bytes, err := guiIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gui/index.html", size: 3164, mode: os.FileMode(438), modTime: time.Unix(1546014002, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"gui/error.html": guiErrorHtml,
	"gui/index.html": guiIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"gui": &bintree{nil, map[string]*bintree{
		"error.html": &bintree{guiErrorHtml, map[string]*bintree{}},
		"index.html": &bintree{guiIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

